<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Git on 庄泽伟的博客</title><link>https://crownjoker07.github.io/categories/git/</link><description>Recent content in Git on 庄泽伟的博客</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><copyright>ZhuangZewei</copyright><lastBuildDate>Sun, 09 Mar 2025 16:00:00 +0800</lastBuildDate><atom:link href="https://crownjoker07.github.io/categories/git/index.xml" rel="self" type="application/rss+xml"/><item><title>git中subtree和submodule的区别</title><link>https://crownjoker07.github.io/p/git%E4%B8%ADsubtree%E5%92%8Csubmodule%E7%9A%84%E5%8C%BA%E5%88%AB/</link><pubDate>Sun, 09 Mar 2025 16:00:00 +0800</pubDate><guid>https://crownjoker07.github.io/p/git%E4%B8%ADsubtree%E5%92%8Csubmodule%E7%9A%84%E5%8C%BA%E5%88%AB/</guid><description>&lt;blockquote&gt;
&lt;p&gt;最近在公司的项目中有一部分的代码需要多个项目共用（其实这部分代码就是我所写的一些工具代码），简单调查了一下发现有 subtree（子树）和 submodule（子模块）这两种方式，于是乎就有了这一篇文章&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;以下是 Git 子树（Subtree）与子模块（Submodule）的详细对比，涵盖核心概念、使用场景及操作差异，并附对比表格：&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id="一核心区别"&gt;一、核心区别
&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;对比维度&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;Git 子模块（Submodule）&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;Git 子树（Subtree）&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;存储方式&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;子模块是主仓库中的一个&lt;strong&gt;引用&lt;/strong&gt;，指向子仓库的特定提交，子仓库独立存在。&lt;/td&gt;
&lt;td&gt;子树是主仓库中的一个&lt;strong&gt;完整副本&lt;/strong&gt;，子仓库的代码和历史直接合并到主仓库中。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;版本控制&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;子模块的提交历史独立于主仓库，主仓库仅记录子模块的提交 ID。&lt;/td&gt;
&lt;td&gt;子树的提交历史与主仓库共享，子仓库的修改会体现在主仓库的提交记录中。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;依赖管理&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;需要显式维护子模块的版本，主仓库与子模块的更新需分别操作。&lt;/td&gt;
&lt;td&gt;子树的代码与主仓库代码统一管理，更新和修改可直接通过主仓库完成。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;工作流程&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;克隆主仓库后需额外执行 &lt;code&gt;git submodule init&lt;/code&gt; 和 &lt;code&gt;git update&lt;/code&gt; 初始化子模块。&lt;/td&gt;
&lt;td&gt;开发者无需特殊操作，子树被视为普通目录，工作流程与常规 Git 操作一致。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;文件结构&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;生成 &lt;code&gt;.gitmodules&lt;/code&gt; 文件记录子模块信息，子模块代码存放在独立目录中。&lt;/td&gt;
&lt;td&gt;无额外配置文件，子树的代码完全嵌入主仓库目录结构。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;更新与同步&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;需手动执行 &lt;code&gt;git submodule update --remote&lt;/code&gt; 拉取子模块更新，并提交主仓库中的子模块引用变更。&lt;/td&gt;
&lt;td&gt;通过 &lt;code&gt;git subtree pull&lt;/code&gt; 合并子仓库更新到主仓库，或直接提交子树的修改到主仓库。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;适用场景&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;适合需要独立维护的组件库（如公共依赖库），且需与主仓库版本解耦的场景。&lt;/td&gt;
&lt;td&gt;适合紧密集成的子项目，或希望将子项目代码与主项目统一管理的场景。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;hr&gt;
&lt;h3 id="二详细解析"&gt;二、详细解析
&lt;/h3&gt;&lt;h4 id="1-存储与版本管理"&gt;1. &lt;strong&gt;存储与版本管理&lt;/strong&gt;
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;子模块&lt;/strong&gt;&lt;br&gt;
子模块通过 &lt;code&gt;.gitmodules&lt;/code&gt; 文件记录子仓库的 URL 和路径，主仓库仅存储子模块的提交 ID。子模块的代码独立维护，开发者需分别管理主仓库和子模块的提交。例如，更新子模块需进入子模块目录执行 &lt;code&gt;git pull&lt;/code&gt;，再提交主仓库中的子模块引用变更。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;子树&lt;/strong&gt;&lt;br&gt;
子树将子仓库的代码和历史直接合并到主仓库中，无独立配置文件。子树的修改会反映在主仓库的提交记录中，且更新通过 &lt;code&gt;git subtree pull&lt;/code&gt; 或 &lt;code&gt;git subtree push&lt;/code&gt; 完成，无需切换目录。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="2-协作与维护"&gt;2. &lt;strong&gt;协作与维护&lt;/strong&gt;
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;子模块&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;优点&lt;/strong&gt;：子模块的独立性适合需要多团队协作的场景，例如多个父项目共用同一子模块时，可确保子模块的版本一致性。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;缺点&lt;/strong&gt;：克隆主仓库后需手动初始化子模块（&lt;code&gt;git submodule update --init&lt;/code&gt;），且删除子模块步骤繁琐（需清理 &lt;code&gt;.gitmodules&lt;/code&gt; 和缓存）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;子树&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;优点&lt;/strong&gt;：对开发者透明，适合不希望暴露子项目独立性的场景。例如，将第三方库嵌入主项目时，子树可简化依赖管理。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;缺点&lt;/strong&gt;：历史记录混杂，难以单独追踪子仓库的修改。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="3-更新与冲突处理"&gt;3. &lt;strong&gt;更新与冲突处理&lt;/strong&gt;
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;子模块&lt;/strong&gt;&lt;br&gt;
子模块的更新需显式操作，若子仓库有更新，需在主仓库中提交新的子模块提交 ID。若多个开发者同时修改子模块，可能因版本不一致导致冲突。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;子树&lt;/strong&gt;&lt;br&gt;
子树的更新通过合并完成，类似常规分支合并。若子仓库和主仓库同时修改同一文件，需手动解决冲突，但整体流程更接近标准 Git 操作。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="4-典型场景"&gt;4. &lt;strong&gt;典型场景&lt;/strong&gt;
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;子模块适用场景&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;公共工具库（如通用组件、SDK）需要被多个主项目引用。&lt;/li&gt;
&lt;li&gt;子项目需独立版本控制，且主项目需灵活切换子项目版本。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;子树适用场景&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;第三方库的直接嵌入（如开源项目依赖的代码片段）。&lt;/li&gt;
&lt;li&gt;子项目与主项目高度耦合，无需独立维护。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id="三总结建议"&gt;三、总结建议
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;选择子模块&lt;/strong&gt;：若需子项目独立维护、版本解耦，或需要跨项目共享同一子仓库。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;选择子树&lt;/strong&gt;：若希望简化依赖管理、减少协作复杂度，或子项目无需独立存在。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;提示&lt;/strong&gt;：Git 官方自 1.7.11 版本起推荐优先使用子树，因其操作更直观且与常规 Git 流程兼容性更好。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;由于子树推送时，无法直观的看出推送了哪些文件，我还是选择 git 仓库里面嵌入 git 仓库，虽然要提交两次，但是至少清晰直观&lt;/p&gt;</description></item><item><title>Github如何一键部署</title><link>https://crownjoker07.github.io/p/github%E5%A6%82%E4%BD%95%E4%B8%80%E9%94%AE%E9%83%A8%E7%BD%B2/</link><pubDate>Mon, 03 Mar 2025 00:00:00 +0800</pubDate><guid>https://crownjoker07.github.io/p/github%E5%A6%82%E4%BD%95%E4%B8%80%E9%94%AE%E9%83%A8%E7%BD%B2/</guid><description>&lt;blockquote&gt;
&lt;p&gt;由于最近一直更新博客（小骄傲），但是发现每次部署，都要博客仓库打包后，手动复制到网页仓库发布，很麻烦，所以研究一下有没有什么自动化部署的工具&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;需要在源码仓库根目录创建.github/workflows/deploy.yml文件，然后配置&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;div class="chroma"&gt;
&lt;table class="lntable"&gt;&lt;tr&gt;&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code&gt;&lt;span class="lnt"&gt; 1
&lt;/span&gt;&lt;span class="lnt"&gt; 2
&lt;/span&gt;&lt;span class="lnt"&gt; 3
&lt;/span&gt;&lt;span class="lnt"&gt; 4
&lt;/span&gt;&lt;span class="lnt"&gt; 5
&lt;/span&gt;&lt;span class="lnt"&gt; 6
&lt;/span&gt;&lt;span class="lnt"&gt; 7
&lt;/span&gt;&lt;span class="lnt"&gt; 8
&lt;/span&gt;&lt;span class="lnt"&gt; 9
&lt;/span&gt;&lt;span class="lnt"&gt;10
&lt;/span&gt;&lt;span class="lnt"&gt;11
&lt;/span&gt;&lt;span class="lnt"&gt;12
&lt;/span&gt;&lt;span class="lnt"&gt;13
&lt;/span&gt;&lt;span class="lnt"&gt;14
&lt;/span&gt;&lt;span class="lnt"&gt;15
&lt;/span&gt;&lt;span class="lnt"&gt;16
&lt;/span&gt;&lt;span class="lnt"&gt;17
&lt;/span&gt;&lt;span class="lnt"&gt;18
&lt;/span&gt;&lt;span class="lnt"&gt;19
&lt;/span&gt;&lt;span class="lnt"&gt;20
&lt;/span&gt;&lt;span class="lnt"&gt;21
&lt;/span&gt;&lt;span class="lnt"&gt;22
&lt;/span&gt;&lt;span class="lnt"&gt;23
&lt;/span&gt;&lt;span class="lnt"&gt;24
&lt;/span&gt;&lt;span class="lnt"&gt;25
&lt;/span&gt;&lt;span class="lnt"&gt;26
&lt;/span&gt;&lt;span class="lnt"&gt;27
&lt;/span&gt;&lt;span class="lnt"&gt;28
&lt;/span&gt;&lt;span class="lnt"&gt;29
&lt;/span&gt;&lt;span class="lnt"&gt;30
&lt;/span&gt;&lt;span class="lnt"&gt;31
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-yml" data-lang="yml"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l"&gt;Deploy Hugo&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nt"&gt;on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;push&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;branches&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="l"&gt;main] &lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c"&gt;# 触发分支（源码分支）&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nt"&gt;jobs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;build-deploy&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;runs-on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l"&gt;ubuntu-latest&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;- &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l"&gt;拉取代码&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;uses&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l"&gt;actions/checkout@v4&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;with&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;submodules&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c"&gt;# 如果用了主题子模块必加&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;- &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l"&gt;安装 Hugo&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;run&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l"&gt;sudo snap install hugo&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;- &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l"&gt;生成静态文件&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;run&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l"&gt;hugo --minify&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;- &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l"&gt;部署到 GitHub Pages&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;uses&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l"&gt;peaceiris/actions-gh-pages@v3&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;with&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c"&gt;# 从默认的 GITHUB_TOKEN 改为自己的 Personal Token&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;personal_token&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l"&gt;${{ secrets.PERSONAL_TOKEN }} &lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c"&gt;# 指定目标仓库（格式：用户名/仓库名）&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;external_repository&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l"&gt;CrownJoker07/CrownJoker07.github.io&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;publish_dir&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l"&gt;./public&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c"&gt;# 强制目标分支为 main&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;publish_branch&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l"&gt;main&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c"&gt;# 添加以下参数解决历史提交冲突&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;force_orphan&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l"&gt;true构建目录&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;strong&gt;secrets.PERSONAL_TOKEN&lt;/strong&gt;需要在源码仓库的&lt;strong&gt;Settings/Secrets and Variables/Actions&lt;/strong&gt;创建Secrets，名字叫PERSONAL_TOKEN，内容是 GitHub账号**Settings/Developer Settings/Personal access tokens (classic)**的具有工作流权限的密令&lt;/p&gt;
&lt;p&gt;配置好后，试试推送，就会发现已经触发Github Action.&lt;/p&gt;</description></item><item><title>git如何删除历史大文件</title><link>https://crownjoker07.github.io/p/git%E5%A6%82%E4%BD%95%E5%88%A0%E9%99%A4%E5%8E%86%E5%8F%B2%E5%A4%A7%E6%96%87%E4%BB%B6/</link><pubDate>Sun, 02 Mar 2025 00:00:00 +0800</pubDate><guid>https://crownjoker07.github.io/p/git%E5%A6%82%E4%BD%95%E5%88%A0%E9%99%A4%E5%8E%86%E5%8F%B2%E5%A4%A7%E6%96%87%E4%BB%B6/</guid><description>&lt;blockquote&gt;
&lt;p&gt;刚刚写第一篇“终于拥有自己的博客啦！！！”的时候，不小心上传了个 10M 左右的 gif 图，即使我已经删掉了，.git文件夹里面还是保留（意味着历史记录也保留了），问题来了应该如何删除历史大文件呢？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;概要：&lt;/strong&gt;&lt;br&gt;
找到大文件，删除即可，发现其实本质上就是克隆了个新项目，删除了指定文件，需要强制推送到远程仓库。所以是有可能导致原仓库数据丢失，因此尽量少传大文件，不到必不可以不要使用以下命令！！！&lt;/p&gt;
&lt;h2 id="第一步找到大文件"&gt;第一步：找到大文件
&lt;/h2&gt;&lt;div class="highlight"&gt;&lt;div class="chroma"&gt;
&lt;table class="lntable"&gt;&lt;tr&gt;&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code&gt;&lt;span class="lnt"&gt;1
&lt;/span&gt;&lt;span class="lnt"&gt;2
&lt;/span&gt;&lt;span class="lnt"&gt;3
&lt;/span&gt;&lt;span class="lnt"&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-Shell" data-lang="Shell"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;git rev-list --objects --all &lt;span class="p"&gt;|&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;git cat-file --batch-check&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;%(objectname) %(objecttype) %(objectsize) %(rest)&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;sort -k3 -n &lt;span class="p"&gt;|&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;tail -5
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;以下是该命令的详细解析，分步骤解释其作用及实现原理：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1. &lt;code&gt;git rev-list --objects --all&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;功能&lt;/strong&gt;：列出 Git 仓库中所有对象（包括提交、树、blob 等）的哈希值和路径。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;--objects&lt;/code&gt;：输出所有对象的哈希值及关联路径（如文件路径）。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--all&lt;/code&gt;：覆盖所有引用（分支、标签等），确保包含整个仓库历史。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;输出示例&lt;/strong&gt;：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;div class="chroma"&gt;
&lt;table class="lntable"&gt;&lt;tr&gt;&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code&gt;&lt;span class="lnt"&gt;1
&lt;/span&gt;&lt;span class="lnt"&gt;2
&lt;/span&gt;&lt;span class="lnt"&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-text" data-lang="text"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;c7a9d8... blob path/to/file.txt
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;8a4d2... commit HEAD
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;2. &lt;code&gt;git cat-file --batch-check='%(objectname) %(objecttype) %(objectsize) %(rest)'&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;功能&lt;/strong&gt;：批量检查对象信息，提取哈希、类型、大小和路径。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;--batch-check&lt;/code&gt;：以批处理模式解析输入行，按格式输出信息。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;格式说明&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;%(objectname)&lt;/code&gt;：对象哈希值。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;%(objecttype)&lt;/code&gt;：对象类型（&lt;code&gt;blob&lt;/code&gt;、&lt;code&gt;tree&lt;/code&gt;、&lt;code&gt;commit&lt;/code&gt;）。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;%(objectsize)&lt;/code&gt;：对象占用存储空间（字节）。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;%(rest)&lt;/code&gt;：对象关联路径（仅对 &lt;code&gt;blob&lt;/code&gt; 类型有效，其他类型为空）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;输出示例&lt;/strong&gt;：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;div class="chroma"&gt;
&lt;table class="lntable"&gt;&lt;tr&gt;&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code&gt;&lt;span class="lnt"&gt;1
&lt;/span&gt;&lt;span class="lnt"&gt;2
&lt;/span&gt;&lt;span class="lnt"&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-text" data-lang="text"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;c7a9d8... blob 120000 path/to/large-file.jpg
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;8a4d2... tree 4096 (空)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;3. &lt;code&gt;sort -k3 -n&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;功能&lt;/strong&gt;：按第三列（对象大小）进行数字排序。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-k3&lt;/code&gt;：指定以第三列为排序键。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-n&lt;/code&gt;：按数值大小排序（默认按字符串排序会导致 &lt;code&gt;100&lt;/code&gt; &amp;lt; &lt;code&gt;20&lt;/code&gt;）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;结果示例&lt;/strong&gt;（排序后）：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;div class="chroma"&gt;
&lt;table class="lntable"&gt;&lt;tr&gt;&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code&gt;&lt;span class="lnt"&gt;1
&lt;/span&gt;&lt;span class="lnt"&gt;2
&lt;/span&gt;&lt;span class="lnt"&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-text" data-lang="text"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;...
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;d3f4a... blob 500 path/to/small.txt
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;c7a9d... blob 120000 path/to/large.jpg
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;4. &lt;code&gt;tail -5&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;功能&lt;/strong&gt;：取排序结果的最后 5 行，即最大的 5 个对象。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;因 &lt;code&gt;sort&lt;/code&gt; 是升序排列，末尾行对应最大文件。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;最终输出示例&lt;/strong&gt;：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;div class="chroma"&gt;
&lt;table class="lntable"&gt;&lt;tr&gt;&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code&gt;&lt;span class="lnt"&gt;1
&lt;/span&gt;&lt;span class="lnt"&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-text" data-lang="text"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;c7a9d... blob 120000 path/to/large.jpg
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;9b2e4... blob 95000 path/to/video.mp4
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id="适用场景"&gt;适用场景
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;定位大文件&lt;/strong&gt;：快速找出仓库中占用空间最大的文件（如误提交的二进制文件）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;性能优化&lt;/strong&gt;：清理历史大文件前进行验证，避免误删关键数据。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;兼容性&lt;/strong&gt;：当 &lt;code&gt;.git/objects/pack&lt;/code&gt; 下无 &lt;code&gt;.idx&lt;/code&gt; 文件时（如新仓库），此命令仍可运行。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id="注意事项"&gt;注意事项
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;路径显示限制&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;仅 &lt;code&gt;blob&lt;/code&gt; 类型对象会显示路径，&lt;code&gt;tree&lt;/code&gt; 和 &lt;code&gt;commit&lt;/code&gt; 类型的 &lt;code&gt;%(rest)&lt;/code&gt; 列为空。&lt;/li&gt;
&lt;li&gt;需结合 &lt;code&gt;git log&lt;/code&gt; 或 &lt;code&gt;git rev-list&lt;/code&gt; 追溯具体提交记录。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;对象类型区分&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;blob&lt;/code&gt; 为文件内容，&lt;code&gt;tree&lt;/code&gt; 为目录结构，&lt;code&gt;commit&lt;/code&gt; 为提交信息。&lt;/li&gt;
&lt;li&gt;大文件通常为 &lt;code&gt;blob&lt;/code&gt; 类型。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;性能影响&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;对大型仓库（如数万提交），&lt;code&gt;git rev-list&lt;/code&gt; 可能耗时较长，建议在空闲时执行。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h2 id="第二步删除大文件"&gt;第二步：删除大文件
&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;研究发现有两条命令：Git filter-branch 和 git filter-repo
&lt;strong&gt;Git filter-branch 与 git filter-repo 使用对比与选择指南&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h3 id="一git-filter-repo-核心用法需要安装-pythonfilter-repo"&gt;一、git filter-repo 核心用法(需要安装 Python、filter-repo)
&lt;/h3&gt;&lt;h3 id="1-删除文件目录"&gt;1. 删除文件/目录
&lt;/h3&gt;&lt;div class="highlight"&gt;&lt;div class="chroma"&gt;
&lt;table class="lntable"&gt;&lt;tr&gt;&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code&gt;&lt;span class="lnt"&gt;1
&lt;/span&gt;&lt;span class="lnt"&gt;2
&lt;/span&gt;&lt;span class="lnt"&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;git filter-repo --force --path &lt;span class="s2"&gt;&amp;#34;giphy-1.gif&amp;#34;&lt;/span&gt; --invert-paths &lt;span class="c1"&gt;#删除指定文件&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;git filter-repo --path-glob &lt;span class="s1"&gt;&amp;#39;*.log&amp;#39;&lt;/span&gt; --invert-paths &lt;span class="c1"&gt;# 删除所有.log文件&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;git filter-repo --path target/ --invert-paths &lt;span class="c1"&gt;# 删除target目录&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;优势&lt;/strong&gt;：直接操作对象数据库，无需检出文件，速度提升数十倍 。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;附加功能&lt;/strong&gt;：自动清理空提交，无需 &lt;code&gt;--prune-empty&lt;/code&gt; 参数。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id="二git-filter-branch-的局限性与适用场景"&gt;二、git filter-branch 的局限性与适用场景
&lt;/h3&gt;&lt;h3 id="局限性"&gt;局限性
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;性能差&lt;/strong&gt;：处理万级提交时耗时可能超过 &lt;code&gt;filter-repo&lt;/code&gt; 的 100 倍 。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;操作复杂&lt;/strong&gt;：需手动处理引用残留（如 &lt;code&gt;.git/refs/original&lt;/code&gt;）和强制推送 。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;兼容性问题&lt;/strong&gt;：可能破坏 &lt;code&gt;git replace&lt;/code&gt; 或 &lt;code&gt;grafts&lt;/code&gt; 机制 。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="仅推荐在以下场景使用"&gt;仅推荐在以下场景使用
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;无 Python 环境&lt;/strong&gt;：&lt;code&gt;filter-repo&lt;/code&gt; 依赖 Python，若环境受限可临时用 &lt;code&gt;filter-branch&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;简单单次操作&lt;/strong&gt;：例如删除单个文件的少量历史记录，命令示例：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;div class="chroma"&gt;
&lt;table class="lntable"&gt;&lt;tr&gt;&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code&gt;&lt;span class="lnt"&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;git filter-branch --index-filter &lt;span class="s1"&gt;&amp;#39;git rm --cached --ignore-unmatch secret.txt&amp;#39;&lt;/span&gt; --prune-empty --tag-name-filter cat -- --all
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h3 id="三核心区别总结"&gt;三、核心区别总结
&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;维度&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;git filter-branch&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;git filter-repo&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;性能&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;极低（逐提交处理）&lt;/td&gt;
&lt;td&gt;高（批量处理对象数据库）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;安全性&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;高风险（残留引用、破坏分支）&lt;/td&gt;
&lt;td&gt;自动清理无效引用，结构稳定&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;操作复杂度&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;需手动处理参数和清理步骤&lt;/td&gt;
&lt;td&gt;命令简洁，参数语义明确&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;功能扩展性&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;有限（依赖 Shell 脚本）&lt;/td&gt;
&lt;td&gt;支持 Python 回调，灵活定制&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;官方推荐度&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;已弃用，仅保留兼容性&lt;/td&gt;
&lt;td&gt;官方推荐替代工具&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;hr&gt;
&lt;h3 id="四操作注意事项"&gt;四、操作注意事项
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;备份仓库&lt;/strong&gt;：操作前务必通过 &lt;code&gt;git clone --mirror&lt;/code&gt; 备份。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;协作同步&lt;/strong&gt;：强制推送后需通知协作者重新克隆仓库。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;验证结果&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;检查文件是否彻底删除：&lt;code&gt;git log -- &amp;lt;file-name&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;对比仓库体积：&lt;code&gt;du -sh .git&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;清理远程仓库&lt;/strong&gt;：GitHub/GitLab 需手动触发存储库清理或重新推送。&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h3 id="附命令替换对照表"&gt;附：命令替换对照表
&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;filter-branch 场景&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;filter-repo 等效命令&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;删除文件&lt;/td&gt;
&lt;td&gt;&lt;code&gt;--path &amp;lt;file&amp;gt; --invert-paths&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;保留子目录&lt;/td&gt;
&lt;td&gt;&lt;code&gt;--subdirectory-filter &amp;lt;dir&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;修改提交邮箱&lt;/td&gt;
&lt;td&gt;&lt;code&gt;--email-callback&lt;/code&gt; + Python 函数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;清理空提交&lt;/td&gt;
&lt;td&gt;自动处理，无需参数&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;通过以上对比，&lt;strong&gt;&lt;code&gt;git filter-repo&lt;/code&gt; 在效率、安全性和易用性上全面胜出&lt;/strong&gt;，建议优先使用。仅在对环境或兼容性有特殊需求时考虑 &lt;code&gt;filter-branch&lt;/code&gt;。&lt;/p&gt;
&lt;h2 id="第三步强制推送到远程仓库"&gt;第三步：强制推送到远程仓库
&lt;/h2&gt;&lt;div class="highlight"&gt;&lt;div class="chroma"&gt;
&lt;table class="lntable"&gt;&lt;tr&gt;&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code&gt;&lt;span class="lnt"&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;git push --force origin main
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;</description></item></channel></rss>